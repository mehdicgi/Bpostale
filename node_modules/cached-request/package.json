{
  "name": "cached-request",
  "version": "0.1.4",
  "description": "Node.js module to perform HTTP requests with caching support",
  "author": {
    "name": "Daniel LÃ³pez",
    "email": "danypype@gmail.com"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/alltherooms/cached-request"
  },
  "bugs": {
    "url": "https://github.com/alltherooms/cached-request/issues"
  },
  "keywords": [
    "request",
    "cache",
    "caching"
  ],
  "dependencies": {
    "graceful-fs": "^3.0.5"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^2.1.0",
    "nock": "^0.52.4",
    "request": "^2.51.0",
    "temp": "^0.8.1"
  },
  "readme": "#cached-request\nNode.js module to perform HTTP requests with caching support.\n\n##Why?\nAt [alltherooms](http://alltherooms.com/) we make lots of requests to external APIs, and caching is crucial to provide a good experience to our users. We also love streams! however, we had a hard time finding a good tool for caching HTTP responses and streaming them at the same time, so we wrote **cached-request**. We hope to help others, and feedback is always welcome. :)\n\n##How it works\nThis tool was made to work with the popular [request](https://github.com/request/request) module, which simplifies the HTTP requests in Node.js. Therefore, this must be consireded a wrapper around **request**.\n\nFirst, you instantiate a **cachedRequest** instance by passing a **request** function, which is going to act as the requester for the uncached requests - you still need to `$npm install request` independently. - Then, you can use **cachedRequest** to perform your HTTP requests.\n\nThe caching takes place in the filesystem, storing the responses as compressed gzipped files.\n\nPlease note this will cache *everything*, so don't use it for making things like POST or PUT requests that you don't want to be cached.\n\n##Installation\nInstall it using [npm](https://www.npmjs.com/)\n```\n$ npm install cached-request\n```\n\n##Usage\nFirst, you must set it up:\n```javascript\nvar request = require('request')\n,   cachedRequest = require('cached-request')(request)\n,   cacheDirectory = \"/tmp/cache\";\n\ncacheRequest.setCacheDirectory(cacheDirectory);\n```\n_Note_: You have to ensure the user that launches the process has read+write permissions over `cacheDirectory`, otherwise the program will fail.\n\nThen you can use `cachedRequest` just as you use [request](https://github.com/request/request): passing a callback, or as a stream.\n\n###Passing a callback\n```javascript\ncachedRequest(options, function (error, response, body) {\n  if (error) {\n    //Handle request error\n  }\n  //Do what you need with `response` and `body`\n});\n```\n\n###As a stream\n```\ncachedRequest(options).pipe(someWriteStream);\n```\n\n##request options\nWhen making a request, you must pass an `options` object as you can observe in the examples above. This object can contain any of the [options supported by **request**](https://github.com/request/request#requestoptions-callback) with the addition of a required `ttl` option.\n\n- `ttl`: Number of milliseconds for the cached response to be considered stale.\n\n    ```javascript\n      var options = {\n        url: \"https://www.google.com\",\n        ttl: 3000 //3 seconds\n      };\n      cachedRequest(options, callback);\n    ```\n\n##Can I use everything that comes with **request**?\nNo, there's some things you can't use. For example, the shortcut functions `.get`, `.post`, `.put`, etc. are not available in **cached-request**. If you'd like to have them, this is a great opportunity to contribute!\n\n##Running tests\nRun the tests with npm\n```\n$ npm test\n```\n\n##License (MIT)\n",
  "readmeFilename": "README.md",
  "_id": "cached-request@0.1.4",
  "dist": {
    "shasum": "4a233260a99ecaeedddd06dc67caee124e56b7ed"
  },
  "_from": "cached-request@",
  "_resolved": "http://registry.npmjs.org/cached-request/-/cached-request-0.1.4.tgz"
}
